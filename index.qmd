---
# do not edit starts
jupyter: python3
toc: true
execute: 
  freeze: auto
  echo: false
format:
  html:
    code-fold: true
    template: template/template.html
    template-partials: 
      - template/title-block.html
# do not edit ends
title: "Oral History Text Analysis Project (OHTAP)"
session: "Spring 2024"
image: "data/imgs/placeholder.jpg"
project-members:
  - name: Dr. Estelle Freedman
    designation: Edgar E. Robinson Professor in U.S. History
    orcid: https://orcid.org/0000-0002-1801-481X
  - name: Natalie Marine-Street
    designation: Oral History Program Manager
    orcid: https://orcid.org/0009-0007-2121-500X
  - name: Flora Yuan
    designation: Intern - Spring, 2024

project-description: "The project Description contains few lines of description about the project. The description should be succint and give the reader a brief overview of what they could expect in the article. The project description can span from 4-5 lines and it is expected to capture the complete essence of the project. This article page comprises of two sub-articles related to the group. The article 1 focuses on the authoring capabilites of quarto and article 2 focuses on the computational capabilities. This article page is made using Quarto."

---
# Refining Digital Humanities Tools for Womenâ€™s Narratives
:::{.article-author}
Flora Yuan
:::
I was thrilled to start working on the OHTAP project with Professor Freedman. 
The overall goals for this project can be summarized in three different categories. The first goal 
was Data Organization and Filtering. I began by creating and organizing a new folder system. Previously, 
files were dispersed across separate folders; my task involved consolidating them into a single directory 
with subfolders for 21 different databases. Within each subfolder, I focused on filtering interviews to 
include only those featuring testaments from women, and I identified and corrected various errors in the 
existing setup. This process involved cross-checking all raw text files against the overall OHTAP metadata 
spreadsheet, where I discovered issues such as mislabeling of texts, inclusion of interviews from men, and 
missing interview files

The second goal of this project was Repository Maintenance and Development of Instructional Materials. This 
part of the project involved building upon the work of previous interns. My responsibilities included revising 
the instruction manual for Winnow, a user-friendly tool designed to help narrow down large text collections. 
I also worked on cleaning out and maintaining the Winnow GitHub repositories. I assessed the organization of the
 current repositories and made edits to ensure they were readable and clear. Furthermore, I assisted with 
 research on the licensing and copyright statements of particular digital humanities applications, focusing on the 
 legal considerations for the release and licensing of Winnow.

The final goal of this project was Data Analysis and Exploration. For this stage, I performed data cleaning necessary 
for depositing files in the Stanford University digital repository. Additionally, I conducted natural language processing 
techniques and word frequency analyses to explore thematic trends and linguistic patterns within the interviews. This 
analytical work aimed to uncover deeper insights into the lived experiences of women, shedding light on their personal 
narratives and the socio-cultural contexts surrounding their testimonies.


## Authoring features of Quarto
In this section, let's see some of the authoring features of Quarto.


### Callouts

Quarto allows different types of callouts to emphasize the content.

::: {.callout-note}
Note that there are five types of callouts, including:
`note`, `warning`, `important`, `tip`, and `caution`.
:::

::: {.callout-tip}
## Tip with Title
This is an example of a callout with a title.
:::

::: {.callout-caution collapse="true"}
## Expand To Learn About Collapse
This is an example of a 'folded' caution callout that can be expanded by the user. You can use `collapse="true"` to collapse it by default or `collapse="false"` to make a collapsible callout that is expanded by default.
:::


### Figures
In Quarto, figures can be easily imported using the markdown syntax, given the image is stored in the codebase. You can see the example given below.

![This is an example image](data/imgs/placeholder.jpg)

Below is a full column image.

:::{.column-page}
![](data/imgs/placeholder.jpg)
:::



### Tables
In Quarto, tables can be easily created using the pipe table markdown syntax. You can see the example given below.

| Default | Left | Right | Center |
|---------|:-----|------:|:------:|
| 12      | 12   |    12 |   12   |
| 123     | 123  |   123 |  123   |
| 1       | 1    |     1 |   1    |

: Demonstration of pipe table syntax


### Diagrams
Quarto allows natively the authors to create diagrams using Mermaid and Graphviz. Check the [official documentation](https://quarto.org/docs/authoring/diagrams.html) for more details.

Below is an example of a Mermaid diagram.
```{mermaid}
flowchart LR
  A[Hard edge] --> B(Round edge)
  B --> C{Decision}
  C --> D[Result one]
  C --> E[Result two]
```

### Videos
In Quarto, videos can be embedded from both locally and remote sources such as YouTube and Vimeo.
{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}

### Appendices and Footnotes
Quarto allows the authors to create appendices and footnotes easily.

#### Appendix
In Quarto, appendices can be created using the `.appendix` class. The appendix section is placed at the end of the document and is not included in the table of contents.

##### Appendix Example {.appendix}
Here is an example of an appendix.

#### Footnote
Here is a footnote reference,[^1] and another.[^longnote]

[^1]: Here is the footnote.

[^longnote]: Here's one with multiple blocks.

    Subsequent paragraphs are indented to show that they
belong to the previous footnote.

    The whole paragraph can be indented, or just the first
    line.  In this way, multi-paragraph footnotes work like
    multi-paragraph list items.




# Title of Article 2
:::{.article-author}
Joe Doe
:::

This article focuses on the computational capabilities of Quarto.  


## Visualizations
Quarto allows the users to run Python and R code directly in the page and get their output. This means that cool and interactive visualizations generated using Python or R can be rendered directly in the page. Please ensure that the essential library dependencies are installed to render the visualizations. For example, the following visualization requires `plotly` library which is installed along with the requirements. Whenever you install a new library, don't forget to add it to `requirements.txt`.

Whenever an interactive visualization is added, an equivalent static image alternative should also be added for the Anthology print version. Refer to the code below.

The content below will appear only in the html version.

::: {.content-visible when-format="html"}
### Interactive Plotly Chart
For a demonstration of a Plotly chart, see @fig-example.

```{python}
#| label: fig-example
#| fig-cap: Example Interactive Plotly Chart
import plotly.express as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width", y="sepal_length", color="species",
                 size='petal_length', hover_data=['petal_width'])
fig.show()
```
:::

The content below will appear only in the pdf output but not in the html version.

::: {.content-visible when-format="pdf"}
The below content will appear only in PDF format.
![](data/imgs/placeholder.jpg)
:::

## Observable
Similar to Python and R code, Quarto is also capable of handling Observable. Please refer to the [official documentation](https://quarto.org/docs/computations/ojs.html) for more details.